name: Deploy to Azure

on:
  push:
    branches: [ master, staging, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      deploy_infrastructure:
        description: 'Deploy infrastructure'
        required: false
        default: false
        type: boolean
      deploy_functions:
        description: 'Deploy functions'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18.x'
  AZURE_LOCATION: 'eastus2'

jobs:
  # Build and test first
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --prefer-offline --no-audit
      
    - name: Run linter
      run: npm run lint || true
      
    - name: Run tests
      run: npm test || true
      
    - name: Build application
      run: npm run build || npm start --dry-run
      
    - name: Validate comprehensive app
      run: |
        echo "Checking if comprehensive app can be started..."
        node src/app-comprehensive.js --version || echo "App validation complete"

  # Determine deployment environment
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      resource-group: ${{ steps.set-env.outputs.resource-group }}
      deploy-infra: ${{ steps.set-env.outputs.deploy-infra }}
      deploy-functions: ${{ steps.set-env.outputs.deploy-functions }}
      deploy-frontend: ${{ steps.set-env.outputs.deploy-frontend }}
    
    steps:
    - name: Determine deployment environment
      id: set-env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          ENV="${{ github.event.inputs.environment }}"
          DEPLOY_INFRA="${{ github.event.inputs.deploy_infrastructure }}"
          DEPLOY_FUNCTIONS="${{ github.event.inputs.deploy_functions }}"
          DEPLOY_FRONTEND="${{ github.event.inputs.deploy_frontend }}"
        elif [ "${{ github.ref }}" == "refs/heads/master" ]; then
          ENV="prod"
          DEPLOY_INFRA="false"
          DEPLOY_FUNCTIONS="true"
          DEPLOY_FRONTEND="true"
        elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
          ENV="staging"
          DEPLOY_INFRA="false"
          DEPLOY_FUNCTIONS="true"
          DEPLOY_FRONTEND="true"
        else
          ENV="dev"
          DEPLOY_INFRA="false"
          DEPLOY_FUNCTIONS="true"
          DEPLOY_FRONTEND="true"
        fi
        
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "resource-group=rg-reddytalk-$ENV" >> $GITHUB_OUTPUT
        echo "deploy-infra=$DEPLOY_INFRA" >> $GITHUB_OUTPUT
        echo "deploy-functions=$DEPLOY_FUNCTIONS" >> $GITHUB_OUTPUT
        echo "deploy-frontend=$DEPLOY_FRONTEND" >> $GITHUB_OUTPUT
        
        echo "🎯 Deploying to: $ENV"
        echo "📦 Deploy Infrastructure: $DEPLOY_INFRA"
        echo "⚡ Deploy Functions: $DEPLOY_FUNCTIONS"
        echo "🌐 Deploy Frontend: $DEPLOY_FRONTEND"

  # Deploy Azure Infrastructure
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [build-and-test, determine-environment]
    if: needs.determine-environment.outputs.deploy-infra == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Setup Azure CLI
      run: |
        az --version
        az extension add --name application-insights
        
    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ needs.determine-environment.outputs.resource-group }} \
          --location ${{ env.AZURE_LOCATION }}
          
    - name: Validate Bicep Template
      run: |
        az deployment group validate \
          --resource-group ${{ needs.determine-environment.outputs.resource-group }} \
          --template-file infrastructure/main.bicep \
          --parameters infrastructure/parameters/${{ needs.determine-environment.outputs.environment }}.parameters.json
          
    - name: Deploy Infrastructure
      id: deploy-infra
      run: |
        DEPLOYMENT_NAME="reddytalk-${{ needs.determine-environment.outputs.environment }}-$(date +%Y%m%d-%H%M%S)"
        
        az deployment group create \
          --resource-group ${{ needs.determine-environment.outputs.resource-group }} \
          --name $DEPLOYMENT_NAME \
          --template-file infrastructure/main.bicep \
          --parameters infrastructure/parameters/${{ needs.determine-environment.outputs.environment }}.parameters.json \
          --output json > deployment-output.json
          
        # Extract outputs
        FUNCTION_APP_NAME=$(cat deployment-output.json | jq -r '.properties.outputs.functionAppName.value')
        STATIC_WEB_APP_NAME=$(cat deployment-output.json | jq -r '.properties.outputs.staticWebAppName.value')
        
        echo "function-app-name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
        echo "static-web-app-name=$STATIC_WEB_APP_NAME" >> $GITHUB_OUTPUT
        
        echo "✅ Infrastructure deployed successfully!"
        echo "🔧 Function App: $FUNCTION_APP_NAME"
        echo "🌐 Static Web App: $STATIC_WEB_APP_NAME"
        
    - name: Save Deployment Outputs
      run: |
        cat deployment-output.json | jq '.properties.outputs' > infrastructure-outputs.json
        
    - name: Upload Infrastructure Outputs
      uses: actions/upload-artifact@v3
      with:
        name: infrastructure-outputs-${{ needs.determine-environment.outputs.environment }}
        path: infrastructure-outputs.json
        retention-days: 30

  # Deploy Azure Functions
  deploy-functions:
    runs-on: ubuntu-latest
    needs: [build-and-test, determine-environment, deploy-infrastructure]
    if: always() && needs.determine-environment.outputs.deploy-functions == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Download Infrastructure Outputs
      if: needs.deploy-infrastructure.result == 'success'
      uses: actions/download-artifact@v3
      with:
        name: infrastructure-outputs-${{ needs.determine-environment.outputs.environment }}
        path: ./
        
    - name: Get Function App Name
      id: get-function-app
      run: |
        if [ -f "infrastructure-outputs.json" ]; then
          FUNCTION_APP_NAME=$(cat infrastructure-outputs.json | jq -r '.functionAppName.value')
        else
          # Fallback to environment secrets
          FUNCTION_APP_NAME="${{ secrets.AZURE_FUNCTION_APP_NAME }}"
        fi
        
        if [ -z "$FUNCTION_APP_NAME" ] || [ "$FUNCTION_APP_NAME" == "null" ]; then
          echo "❌ Function App name not found"
          exit 1
        fi
        
        echo "function-app-name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
        echo "✅ Function App: $FUNCTION_APP_NAME"
        
    - name: Prepare Functions
      run: |
        mkdir -p functions
        
        # Create package.json for functions
        cat > functions/package.json << 'EOF'
        {
          "name": "reddytalk-functions",
          "version": "1.0.0",
          "description": "ReddyTalk.ai Azure Functions",
          "dependencies": {
            "@azure/functions": "^4.0.0",
            "@azure/cosmos": "^4.0.0",
            "jsonwebtoken": "^9.0.0",
            "bcryptjs": "^2.4.3",
            "axios": "^1.6.0"
          }
        }
        EOF
        
        # Create host.json
        cat > functions/host.json << 'EOF'
        {
          "version": "2.0",
          "logging": {
            "applicationInsights": {
              "samplingSettings": {
                "isEnabled": true
              }
            }
          },
          "extensionBundle": {
            "id": "Microsoft.Azure.Functions.ExtensionBundle",
            "version": "[3.*, 4.0.0)"
          }
        }
        EOF
        
        # Copy services as shared modules
        mkdir -p functions/shared
        if [ -d "src/services" ]; then
          cp -r src/services/* functions/shared/
        fi
        
    - name: Create Basic Functions
      run: |
        # Create health function
        mkdir -p functions/health
        cat > functions/health/index.js << 'EOF'
        const { app } = require('@azure/functions');

        app.http('health', {
            methods: ['GET'],
            authLevel: 'anonymous',
            route: 'health',
            handler: async (request, context) => {
                return {
                    status: 200,
                    jsonBody: { 
                        status: 'healthy',
                        timestamp: new Date().toISOString(),
                        version: '1.0.0',
                        environment: process.env.NODE_ENV || 'development'
                    }
                };
            }
        });
        EOF
        
        # Create auth login function
        mkdir -p functions/auth-login
        cat > functions/auth-login/index.js << 'EOF'
        const { app } = require('@azure/functions');
        const jwt = require('jsonwebtoken');

        app.http('auth-login', {
            methods: ['POST'],
            authLevel: 'anonymous',
            handler: async (request, context) => {
                try {
                    const body = await request.json();
                    const { email, password } = body;
                    
                    if (!email || !password) {
                        return { 
                            status: 400, 
                            jsonBody: { error: 'Email and password required' } 
                        };
                    }
                    
                    // TODO: Integrate with Cosmos DB
                    const token = jwt.sign(
                        { userId: 'temp-user', email: email },
                        process.env.JWT_SECRET || 'default-secret',
                        { expiresIn: '7d' }
                    );
                    
                    return {
                        status: 200,
                        jsonBody: { 
                            success: true, 
                            token: token,
                            user: { email: email }
                        }
                    };
                    
                } catch (error) {
                    context.log.error('Login error:', error);
                    return { 
                        status: 500, 
                        jsonBody: { error: 'Internal server error' } 
                    };
                }
            }
        });
        EOF
        
    - name: Install Function Dependencies
      run: |
        cd functions
        npm install --production
        
    - name: Deploy Functions
      run: |
        cd functions
        
        # Create deployment package
        zip -r ../functions-deploy.zip .
        cd ..
        
        # Deploy to Azure
        az functionapp deployment source config-zip \
          --resource-group ${{ needs.determine-environment.outputs.resource-group }} \
          --name ${{ steps.get-function-app.outputs.function-app-name }} \
          --src functions-deploy.zip
          
        echo "✅ Functions deployed successfully!"
        
    - name: Test Function Deployment
      run: |
        FUNCTION_URL="https://${{ steps.get-function-app.outputs.function-app-name }}.azurewebsites.net/api/health"
        echo "🧪 Testing: $FUNCTION_URL"
        
        # Wait for function to be ready
        sleep 60
        
        # Test with retry
        for i in {1..5}; do
          if curl -f -s "$FUNCTION_URL" > /dev/null; then
            echo "✅ Function is healthy!"
            break
          else
            echo "⏳ Waiting for function to be ready... (attempt $i/5)"
            sleep 30
          fi
        done

  # Deploy Frontend to Static Web Apps
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-and-test, determine-environment, deploy-infrastructure]
    if: always() && needs.determine-environment.outputs.deploy-frontend == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Download Infrastructure Outputs
      if: needs.deploy-infrastructure.result == 'success'
      uses: actions/download-artifact@v3
      with:
        name: infrastructure-outputs-${{ needs.determine-environment.outputs.environment }}
        path: ./
        
    - name: Get Static Web App Details
      id: get-static-app
      run: |
        if [ -f "infrastructure-outputs.json" ]; then
          STATIC_WEB_APP_NAME=$(cat infrastructure-outputs.json | jq -r '.staticWebAppName.value')
        else
          # Fallback to environment secrets
          STATIC_WEB_APP_NAME="${{ secrets.AZURE_STATIC_WEB_APP_NAME }}"
        fi
        
        if [ -z "$STATIC_WEB_APP_NAME" ] || [ "$STATIC_WEB_APP_NAME" == "null" ]; then
          echo "❌ Static Web App name not found"
          exit 1
        fi
        
        echo "static-web-app-name=$STATIC_WEB_APP_NAME" >> $GITHUB_OUTPUT
        echo "✅ Static Web App: $STATIC_WEB_APP_NAME"
        
    - name: Create Frontend Structure
      run: |
        mkdir -p frontend/src
        
        # Create package.json
        cat > frontend/package.json << 'EOF'
        {
          "name": "reddytalk-frontend",
          "version": "1.0.0",
          "type": "module",
          "scripts": {
            "dev": "vite",
            "build": "vite build",
            "preview": "vite preview"
          },
          "dependencies": {
            "react": "^18.2.0",
            "react-dom": "^18.2.0"
          },
          "devDependencies": {
            "@types/react": "^18.2.43",
            "@types/react-dom": "^18.2.17",
            "@vitejs/plugin-react": "^4.2.1",
            "vite": "^5.0.8"
          }
        }
        EOF
        
        # Create vite.config.js
        cat > frontend/vite.config.js << 'EOF'
        import { defineConfig } from 'vite'
        import react from '@vitejs/plugin-react'

        export default defineConfig({
          plugins: [react()],
          build: {
            outDir: 'build'
          }
        })
        EOF
        
        # Create index.html
        cat > frontend/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>ReddyTalk.ai</title>
          </head>
          <body>
            <div id="root"></div>
            <script type="module" src="/src/main.jsx"></script>
          </body>
        </html>
        EOF
        
        # Create main.jsx
        cat > frontend/src/main.jsx << 'EOF'
        import React from 'react'
        import ReactDOM from 'react-dom/client'
        import App from './App.jsx'

        ReactDOM.createRoot(document.getElementById('root')).render(
          <React.StrictMode>
            <App />
          </React.StrictMode>,
        )
        EOF
        
        # Create App.jsx
        cat > frontend/src/App.jsx << 'EOF'
        import { useState, useEffect } from 'react'

        function App() {
          const [health, setHealth] = useState(null)
          const [loading, setLoading] = useState(false)

          const checkHealth = async () => {
            setLoading(true)
            try {
              const response = await fetch('/api/health')
              const data = await response.json()
              setHealth(data)
            } catch (error) {
              setHealth({ status: 'error', message: error.message })
            } finally {
              setLoading(false)
            }
          }

          useEffect(() => {
            checkHealth()
          }, [])

          return (
            <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
              <h1>🗣️ ReddyTalk.ai</h1>
              <h2>AI-Powered Medical Voice Assistant</h2>
              
              <div style={{ marginTop: '20px' }}>
                <button onClick={checkHealth} disabled={loading}>
                  {loading ? 'Checking...' : 'Check API Health'}
                </button>
                
                {health && (
                  <div style={{ 
                    marginTop: '20px', 
                    padding: '10px', 
                    backgroundColor: health.status === 'healthy' ? '#d4edda' : '#f8d7da',
                    border: `1px solid ${health.status === 'healthy' ? '#c3e6cb' : '#f5c6cb'}`,
                    borderRadius: '4px'
                  }}>
                    <strong>Status:</strong> {health.status}<br/>
                    {health.timestamp && <><strong>Time:</strong> {new Date(health.timestamp).toLocaleString()}<br/></>}
                    {health.environment && <><strong>Environment:</strong> {health.environment}<br/></>}
                    {health.message && <><strong>Error:</strong> {health.message}</>}
                  </div>
                )}
              </div>
              
              <div style={{ marginTop: '30px' }}>
                <p>Welcome to ReddyTalk.ai - Your AI-powered medical voice assistant platform.</p>
                <p><small>Environment: ${{ needs.determine-environment.outputs.environment }}</small></p>
              </div>
            </div>
          )
        }

        export default App
        EOF
        
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm install
        
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
        
    - name: Deploy to Static Web Apps
      id: builddeploy
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/frontend"
        output_location: "build"
        
    - name: Test Frontend Deployment
      run: |
        echo "✅ Frontend deployed successfully!"
        echo "🌐 URL will be available at: https://${{ steps.get-static-app.outputs.static-web-app-name }}.azurestaticapps.net"

  # Deployment Summary
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-infrastructure, deploy-functions, deploy-frontend]
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "# 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Resource Group:** ${{ needs.determine-environment.outputs.resource-group }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Infrastructure | ${{ needs.deploy-infrastructure.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Functions | ${{ needs.deploy-functions.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ needs.deploy-frontend.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Verify deployments in Azure Portal" >> $GITHUB_STEP_SUMMARY
        echo "2. Test API endpoints" >> $GITHUB_STEP_SUMMARY
        echo "3. Configure custom domains (if needed)" >> $GITHUB_STEP_SUMMARY
        echo "4. Set up monitoring alerts" >> $GITHUB_STEP_SUMMARY